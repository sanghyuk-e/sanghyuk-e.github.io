<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-28T14:36:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sanghyuk’s Blog</title><subtitle>Sanghyuk's Blog</subtitle><author><name>SANGHYUK LEE</name></author><entry><title type="html">Firebase 시작하기</title><link href="http://localhost:4000/firebase/1/" rel="alternate" type="text/html" title="Firebase 시작하기" /><published>2020-12-08T00:00:00+09:00</published><updated>2020-12-08T00:00:00+09:00</updated><id>http://localhost:4000/firebase/1</id><content type="html" xml:base="http://localhost:4000/firebase/1/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Firebase/firebase.png&quot; alt=&quot;Firebase&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firbase란&quot;&gt;Firbase란?&lt;/h2&gt;

&lt;!-- asd
{: .notice} --&gt;

&lt;p&gt;구글에서 제공하는 Firebase라는 플랫폼은 여러가지 기능들을 제공하고 있어 많은 개발자가 사용하고 있다. 제공하는 기능은 인증, 데이터베이스, 푸시 알람, API 등이 있으며 복잡한 과정이 필요하지 않다는 것이 장점이다.&lt;/p&gt;

&lt;h2 id=&quot;firebase-시작하기&quot;&gt;Firebase 시작하기&lt;/h2&gt;

&lt;p&gt;기존 블로그들에 안드로이드를 기반으로 작성된 글이 매우 많다. iOS를 기반으로 작성된 글이 상대적으로 적은데, 연습하는 동시에 최신 과정을 한번 작성해보려고 한다. 이 과정에서 Firebase Realtime Database 와 Firebase Cloud Messaging(FCM) 을 사용하려고 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;프로젝트-생성&quot;&gt;프로젝트 생성&lt;/h2&gt;

&lt;p&gt;가장 먼저 &lt;a href=&quot;https://google.com&quot;&gt;Firebase 홈페이지&lt;/a&gt; 에 접속 &amp;amp; 로그인한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/1.png&quot; alt=&quot;파이어베이스 홈페이지&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;시작하기를 눌러 새 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/2.png&quot; alt=&quot;프로젝트 이름 지정&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;원하는 프로젝트의 이름을 설정하고 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/3.png&quot; alt=&quot;애널리틱스 사용 설정&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;애널리틱스는 어플리케이션 분석에 도움을 주기 때문에 동의하고 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/4.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/4.png&quot; alt=&quot;애널리틱스 구성&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;국가 정도만 원하는 곳으로 설정한 후 프로젝트 생성 버튼을 누르면 약간의 기다림과 함께 프로젝트 생성이 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/5.png&quot; alt=&quot;프로젝트 생성 중&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/6.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/6.png&quot; alt=&quot;프로젝트 생성 완료&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ios-앱에-추가&quot;&gt;iOS 앱에 추가&lt;/h2&gt;

&lt;p&gt;만들어진 프로젝트 안으로 들어가면 아무것도 설정되어있지 않아 초기 페이지가 나온다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/7.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/7.png&quot; alt=&quot;iOS 앱에 추가&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS 버튼을 클릭하여 iOS 앱에 추가하는 작업을 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/8.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/8.png&quot; alt=&quot;번들 추가&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;정보를 입력하는 화면이 나온다. iOS 앱의 번들을 입력하고 넘어가자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/9.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/9.png&quot; alt=&quot;번들 위치&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;번들은 Firebase를 사용하려고 하는 프로젝트의 번들을 입력하고 앱등록 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/10.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/10.png&quot; alt=&quot;.plist파일 다운로드&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GoogleService-Info.plist&lt;/strong&gt; 파일을 다운받아 프로젝트 위치에 넣는 방법을 설명한다. 그대로 따라서 진행한 뒤 다음 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/11.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/11.png&quot; alt=&quot;pod 파일 추가&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/12.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/12.png&quot; alt=&quot;pod 파일 추가&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;코코아팟을 이용해서 팟 파일을 추가하는 방법을 안내하고 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트가 있는 폴더로 이동하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod init&lt;/code&gt; 명령어를 이용해 팟 파일을 만들어 준다.&lt;/li&gt;
  &lt;li&gt;pod 파일을 열어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod 'Firebase/Analytics'&lt;/code&gt; 를 추가한 뒤 저장한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pod install&lt;/code&gt; 명령어를 입력해 설치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 cocoaPod 사용법을 모른다면 구글에 검색해보고 오면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/13.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/13.png&quot; alt=&quot;초기화 코드 추가&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;엑스코드에서 프로젝트를 열고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Appdelegate.swift&lt;/code&gt; 파일을 연다. 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import Firebase&lt;/code&gt; 를 적어서 라이브러리를 추가하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didFinishLaunchingWithOptions&lt;/code&gt; 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FirebaseApp.configure()&lt;/code&gt; 코드를 입력해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Firebase/2020-12-08-1/14.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Firebase/2020-12-08-1/14.png&quot; alt=&quot;설정 마무리&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 단계까지 무리없이 처리했다면 기본적인 프로젝트 세팅은 끝났다고 할 수 있다.&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Firebase" /><category term="Firebase" /><category term="Database" /><category term="cloud" /><summary type="html">Firebase 따라하기</summary></entry><entry><title type="html">Mac 업데이트 후 CocoaPod 오류 해결방법</title><link href="http://localhost:4000/ios/1/" rel="alternate" type="text/html" title="Mac 업데이트 후 CocoaPod 오류 해결방법" /><published>2020-12-04T00:00:00+09:00</published><updated>2020-12-04T00:00:00+09:00</updated><id>http://localhost:4000/ios/1</id><content type="html" xml:base="http://localhost:4000/ios/1/">&lt;p&gt;MacOS를 업데이트를 할 때마다 여러 문제가 발생하는데, xcrun error를 해결하고 나니 CocoaPods에서 다른 오류가 발생했다. CocoaPods로 새로운 라이브러리를 추가하려고 install 을 하려는데 다음과 같은 오류 메시지가 등장했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iOS/2020-12-04-1/1.png&quot; alt=&quot;CocoaPods 에러&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음 보는 오류 메시지에 당연하게도 구글에 검색을 했고, 해결 방법을 찾을 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/issues/8955&quot;&gt;Brew based CocoaPods CLI fails in MacOS 10.15 Catalina due incorrect fallback to Ruby 2.3 #8955&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;고맙게도 위의 링크에서 👍가 가장 많은 댓글에서 해결 방법을 얻었다. 해결 방법은 간단한데 각자 설치한 방법에 따라서 CocoaPods를 재설치 하면 되는 것 같았다. 회사의 맥은 Homebrew를 통해 설치되었으므로 다음과 같은 명령어를 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install cocoapods --build-from-source
$ brew link --overwrite cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 한 번에 잘 되는 걸 본 적이 거의 없다. 첫 번째 명령어를 입력하니 다음과 같은 오류가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/iOS/2020-12-04-1/2.png&quot; alt=&quot;brew 설치 에러&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 오류 내용에 있는 명령어를 입력해 주었더니 인스톨이 잘 진행되었다. 인스톨이 진행되고 나서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link&lt;/code&gt; 가 필요하다고 하여 위 링크 명령어를 입력했고 pod 명령어가 정상적으로 작동하는 것을 확인했다.&lt;/p&gt;

&lt;p&gt;추가적으로 Homebrew를 이용하지 않고 일반적인 방법으로 CocoaPods를 설치한 사람은 다음과 같은 명령어를 사용하면 된다고 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>SANGHYUK LEE</name></author><category term="iOS" /><category term="Swift" /><category term="iOS" /><category term="terminal" /><category term="error" /></entry><entry><title type="html">Mac 업데이트 후 xcrun error 해결방법</title><link href="http://localhost:4000/git/2/" rel="alternate" type="text/html" title="Mac 업데이트 후 xcrun error 해결방법" /><published>2020-12-03T00:00:00+09:00</published><updated>2020-12-03T00:00:00+09:00</updated><id>http://localhost:4000/git/2</id><content type="html" xml:base="http://localhost:4000/git/2/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Git/github.png&quot; alt=&quot;Github&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MacOS를 업데이트를 할 때마다 여러 문제가 발생하는데, 이번에도 개발 관련 이슈가 터졌다. 매번 구글에 검색하여 해결했는데 이번에는 블로그에 간단하게 정리하려고 한다.&lt;/p&gt;

&lt;p&gt;깃에 커밋을 하려고 디렉토리로 이동을 했는데 왠지 모르게 어색한 느낌이 들었다. 자세히 보니 터미널에 브랜치 표시도 나오지 않았고 해당 디렉토리의 현재 상태도 보이지 않았다. 아니나 다를까 깃에 문제가 생겨있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Git/2020-12-03-2/1.png&quot; alt=&quot;xcrun 에러&quot; /&gt;&lt;/p&gt;

&lt;p&gt;찾아보니 해당 오류는 git을 비롯하여 다수의 개발 툴들이 xcrun 에러를 뱉는다고 한다. xcode cli 이슈라고 하는 것 같은데 해결 방법은 의외로 간단했다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xcode-select&lt;/code&gt; 명령어를 사용하여 xcode cli만 따로 설치하는 방법으로 이 문제를 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Git/2020-12-03-2/2.png&quot; alt=&quot;xcode-select 명령어&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 진행하면 &lt;strong&gt;‘xcode-select’ 명령어는 명령어 라인 개발자 도구가 필요합니다. 도구를 지금 설치하겠습니까?&lt;/strong&gt; 라는 메시지와 함께 팝업창이 등장한다. 설치 버튼을 누르면 설치가 시작되고 설치에는 2분 정도 소요된 것 같다. 설치가 완료되면 git이 정상적으로 돌아온 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Git/2020-12-03-2/3.png&quot; alt=&quot;정상으로 돌아온 git&quot; /&gt;&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="git" /><category term="Swift" /><category term="git" /><category term="terminal" /><category term="error" /></entry><entry><title type="html">[codeit - 컴퓨터 개론] 프로그래밍 시작하기 in Python (Part. 2)</title><link href="http://localhost:4000/codeit/2/" rel="alternate" type="text/html" title="[codeit - 컴퓨터 개론] 프로그래밍 시작하기 in Python (Part. 2)" /><published>2020-11-30T00:00:00+09:00</published><updated>2020-11-30T00:00:00+09:00</updated><id>http://localhost:4000/codeit/2</id><content type="html" xml:base="http://localhost:4000/codeit/2/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Codeit/codeit.png&quot; alt=&quot;codeit&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로그래밍-시작하기-in-python&quot;&gt;프로그래밍 시작하기 in Python”&lt;/h1&gt;

&lt;p&gt;프로그래밍 시장은 계속 커지고 있다. 하지만 사실 현업에서는 뛰어난 개발자를 없어서 못 구한다는 것. 프로그래밍의 세계는 광범위하기 때문에, 올바른 방향을 갖고 효과적으로 공부하는 것이 매우 중요하다. 코드잇의 컴퓨터 개론을 통해 프로그래밍 언어, 프로그래머, 프로그램에 대해 올바른 이해를 갖고, 나만의 커리어 로드맵을 만들어 보자.&lt;/p&gt;

&lt;p&gt;컴퓨터의 세계를 이해하려면 프로그래밍을 느껴봐야 하지 않겠는가? 파이썬을 사용하면 프로그래밍을 가장 심플하게 배워볼 수 있다.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;💡Infomation:&lt;/strong&gt;
이 학습은 하루 1시간 학습을 기준으로 약 12일이 소요됩니다.&lt;/p&gt;

&lt;h2 id=&quot;프로그래밍-기본-개념&quot;&gt;프로그래밍 기본 개념&lt;/h2&gt;

&lt;h3 id=&quot;코멘트&quot;&gt;코멘트&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;자료형-개요&quot;&gt;자료형 개요&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;추상화-개요&quot;&gt;추상화 개요&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;변수&quot;&gt;변수&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;칼로리-계산기&quot;&gt;칼로리 계산기&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;함수&quot;&gt;함수&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;카페-모카-레시피&quot;&gt;카페 모카 레시피&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;파라미터&quot;&gt;파라미터&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;여러-개의-파라미터&quot;&gt;여러 개의 파라미터&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;세-수의-곱&quot;&gt;세 수의 곱&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;return문&quot;&gt;return문&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로그래밍-기초-퀴즈&quot;&gt;프로그래밍 기초 퀴즈&lt;/h3&gt;

&lt;hr /&gt;</content><author><name>SANGHYUK LEE</name></author><category term="codeit" /><category term="Python" /><category term="codeit" /><category term="programming" /><summary type="html">프로그래밍 기본 개념</summary></entry><entry><title type="html">[codeit - 컴퓨터 개론] 프로그래밍 시작하기 in Python (Part. 1)</title><link href="http://localhost:4000/codeit/1/" rel="alternate" type="text/html" title="[codeit - 컴퓨터 개론] 프로그래밍 시작하기 in Python (Part. 1)" /><published>2020-11-22T00:00:00+09:00</published><updated>2020-11-22T00:00:00+09:00</updated><id>http://localhost:4000/codeit/1</id><content type="html" xml:base="http://localhost:4000/codeit/1/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Codeit/codeit.png&quot; alt=&quot;codeit&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;프로그래밍-시작하기-in-python&quot;&gt;프로그래밍 시작하기 in Python”&lt;/h1&gt;

&lt;p&gt;프로그래밍 시장은 계속 커지고 있다. 하지만 사실 현업에서는 뛰어난 개발자를 없어서 못 구한다는 것. 프로그래밍의 세계는 광범위하기 때문에, 올바른 방향을 갖고 효과적으로 공부하는 것이 매우 중요하다. 코드잇의 컴퓨터 개론을 통해 프로그래밍 언어, 프로그래머, 프로그램에 대해 올바른 이해를 갖고, 나만의 커리어 로드맵을 만들어 보자.&lt;/p&gt;

&lt;p&gt;컴퓨터의 세계를 이해하려면 프로그래밍을 느껴봐야 하지 않겠는가? 파이썬을 사용하면 프로그래밍을 가장 심플하게 배워볼 수 있다.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;💡Infomation:&lt;/strong&gt;
이 학습은 하루 1시간 학습을 기준으로 약 12일이 소요됩니다.&lt;/p&gt;

&lt;h2 id=&quot;파이썬-첫-걸음&quot;&gt;파이썬 첫 걸음&lt;/h2&gt;

&lt;h3 id=&quot;우리가-사용할-도구들&quot;&gt;우리가 사용할 도구들&lt;/h3&gt;

&lt;p&gt;파이썬으로 코딩을 하기 위해 우리가 설치해야 하는 프로그램이 두 개 있다. &lt;strong&gt;Python interpreter&lt;/strong&gt; 와 &lt;strong&gt;PyCharm&lt;/strong&gt; 이 그것이다. 각각 어떤 역할을 하는지 설명하겠다.&lt;/p&gt;

&lt;p&gt;우리가 쓴 파이썬 코드를 컴퓨터가 그대로 이해할 수 없다. 컴퓨터가 이해할 수 있는 언어는 Machine Code 이다. 그래서 우리가 쓴 파이썬 코드를 Machine Code 로 번역해야 할 필요가 있는데, 여기서 필요한 것이 &lt;strong&gt;Python interpreter&lt;/strong&gt; 이다. 파이썬 코드를 번역해주는 프로그램이라고 생각하면 편하다.&lt;/p&gt;

&lt;p&gt;PyCharm 은 우리가 코딩을 더 편하게 할 수 있도록 도와주는 프로그램이라고 생각하면 된다. 코딩을 하는데 필요한 프로그램들이 있는데 PyCharm은 이 프로그램들을 하나로 모은 &lt;strong&gt;All in One&lt;/strong&gt; 솔루션이다. 이와 같은 프로그램을 &lt;strong&gt;통합개발환경(Integrated Development Environment, IDE)&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;이제부터 Python interpreter 와 PyCharm 을 함께 설치해보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;파이썬-설치-for-mac&quot;&gt;파이썬 설치 (for Mac)&lt;/h3&gt;

&lt;p&gt;먼저 Python interpreter 를 설치해보자. &lt;a href=&quot;https://www.python.org/&quot;&gt;Python 홈페이지&lt;/a&gt; 의 다운로드 탭에서 Mac용 최신버전을 다운로드 받을 수 있다. Phthon도 지속적으로 발전하기 때문에 버전이 존재한다. 가장 최신 버전을 다운 받도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/1.png&quot; alt=&quot;파이썬 다운로드&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다운로드가 끝나면 다운받은 파일을 열어 설치과정을 따라서 설치한다. 중간에 동의를 요구하는 항목은 잘 읽어본뒤 동의를 눌러준다. 이것으로 Python interpreter 의 설치가 간단하게 끝이난다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/2.png&quot; alt=&quot;파이썬 설치&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다음으로 PyCharm 을 설치해보자. PyCharm 은 PyCharm 을 만든 JetBrains 의 홈페이지에서 다운로드 받을 수 있다. &lt;a href=&quot;https://www.jetbrains.com/ko-kr/pycharm/download/#section=mac&quot;&gt;다운로드 페이지&lt;/a&gt;로 이동하여 Community 버전의 PyCharm 을 다운로드 받는다. 우리는 아직 좌측의 Professional 버전까지 필요하지 않아 Community 버전으로 다운로드 하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/3.png&quot; alt=&quot;파이참 다운로드&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다운로드가 끝나면 설치 파일을 실행하여 설치를 진행한다. 팝업 창에서 PyCharm 아이콘을 Applications 폴더에 드래그하여 넣어주는 것으로 간단하게 설치가 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/4.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/4.png&quot; alt=&quot;파이참 설치&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파이썬을 사용하는데 필요한 두개의 프로그램을 모두 설치했다. 이제 파이썬 코드를 작성해보자. 설치된 PyCharm 을 실행한다. 만약 ‘import PyCharm Settings from…’ 팝업이 등장한다면 ‘Do not import settings’ 옵션을 선택하고 넘어가자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/5.png&quot; alt=&quot;파이참 실행&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PyCharm 의 시작화면이 나오면 &lt;strong&gt;New Project&lt;/strong&gt; 버튼을 눌러 새로운 PyCharm 프로젝트를 생성한다. 아래 화면처럼 새 프로젝트의 생성 위치를 설정하는 화면이 나온다. Location 부분에 원하는 경로를 지정해주면 된다.&lt;/p&gt;

&lt;p&gt;Project Interpreter 부분에 Base interpreter 부분을 잠시 살펴보자. 파이썬으로 코딩을 하기 위해서는 Python interpreter 가 필요한데, 여기서 어떤 Python interpreter 를 사용할지 정해주는 부분이다. 위에서 설치한 Python Interpreter 가 정상적으로 설치되었다면 이곳에 설치한 Python interpreter 가 자동으로 설정되어있을 것이다.&lt;/p&gt;

&lt;p&gt;아래쪽의 Project Interpreter 부분은 그대로 두고 하단의 Create 버튼을 눌러 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/6.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/6.png&quot; alt=&quot;프로젝트 생성&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;로딩이 끝나면 오른쪽의 프로젝트 폴더를 우클릭한다. New → Python File 순으로 클릭하여 파이썬 파일을 만들자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/7.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/7.png&quot; alt=&quot;파일 생성&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파일의 이름을 입력하는 창이 등장한다. 원하는 이름을 입력하고 아래쪽에서 Python File 을 선택해준 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; 를 눌러 파일을 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/8.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/8.png&quot; alt=&quot;파일 이름 지정&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;생성한 파일이 우리가 만든 파이썬 프로젝트 폴더 안에 들어있는 것을 확인할 수 있다. 파이썬 파일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 확장자를 가지고 있다.&lt;/p&gt;

&lt;p&gt;이제 파이썬 코드를 작성해보자. hello.py 파일에 다음과 같은 코드를 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 작성했으면 좌측에서 생성한 파이썬 파일을 우클릭 한 뒤, &lt;strong&gt;Run ‘파일명’&lt;/strong&gt; 을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/9.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/9.png&quot; alt=&quot;파이썬 코드 실행&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;올바르게 작성했다면 화면 아래 어떤 영역이 나타나고 ‘Hello world!’ 가 표시되는 것을 볼 수 있을 것이다. 여기까지 잘 따라왔다면 Python interpreter 와 PyCharm 이 정상적으로 잘 설치되었다고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/10.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/10.png&quot; alt=&quot;파이썬 코드 실행 결과&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pycharm-둘러보기&quot;&gt;PyCharm 둘러보기&lt;/h3&gt;

&lt;p&gt;Python interpreter 와 PyCharm 을 설치했으니 PyCharm을 조금 둘러보면서 코드도 작성해보도록 하자. 비어있는 파이썬 프로젝트를 생성하여 시작한다. 우측의 프로젝트 폴더를 우클릭하여 New → File 순으로 클릭하여 파일을 만들자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/11.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/11.png&quot; alt=&quot;파일 생성&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;생성할 파일 이름을 입력하는 창이 등장하면 원하는 파일 이름과 확장자를 입력하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; 를 눌러 파일을 생성한다. 여기서는 hello.py 로 생성하겠다. 이름 뒤에 .py를 붙여 생성하면 파이썬 파일로 생성할 수 있다. 즉, hello 라는 이름의 파이썬 파일을 생성하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/12.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/12.png&quot; alt=&quot;파일 이름 지정&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파일을 생성하는 방법은 이전에 설명한 방법까지 두 가지가 있다. 우측에 프로젝트 폴더를 우클릭하여 New → Python File 을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/13.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/13.png&quot; alt=&quot;파일 생성 방법2&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;마찬가지로 이름을 입력하는 창이 등장하면 원하는 파일 이름’만’ 입력하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; 를 눌러 생성할 수 있다. 확장자를 입력하지 않아도 되기 때문에 이 방법이 조금 더 간단하다고 할 수 있다. 이번에는 goodbye 라는 이름으로 파일을 생성해보겠다. 그러면 총 두개의 파일을 생성한 것이 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/14.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/14.png&quot; alt=&quot;파일 생성 방법2&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이제 코드를 작성해보자. 먼저 생성한 hello.py 파일을 더블클릭하여 연다. 다음의 코드를 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 작성된 프로그램을 실행하기 위해서 좌측에서 hello.py 파일을 우클릭 한 뒤, &lt;strong&gt;Run ‘hello’&lt;/strong&gt; 를 클릭한다. 아래쪽에 어떤 창이 등장하는데 이 창을 &lt;strong&gt;콘솔&lt;/strong&gt; 이라고 부른다. 우리가 작성한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; 는 콘솔에 무언가를 출력하도록 하는 문법이다. 괄호 안에 작성된 것이 콘솔에 출력된다. print 문법에 Hello world! 로 작성했던 내용을 Hello Codeit! 으로 변경한 뒤 콘솔창 좌측의 초록색 ► 모양의 실행 아이콘을 클릭해보자. 실행 버튼은 가장 최근에 실행된 파일을 다시 실행한다. 콘솔에 출력되어있던 Hello world! 가 Hello Codeit! 으로 변경된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/15.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/15.png&quot; alt=&quot;run 버튼으로 실행&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;print 문법을 이용해서 글자만이 아니라 숫자의 연산같은 것들도 출력할 수 있다. Hello Codeit! 으로 작성된 print문의 내용을 2 + 5 로 수정한 후 실행 버튼을 다시 클릭해보자. 2 + 5 의 값인 7이 출력되는 것을 확인할 수 있다. 2 * 5 등의 연산으로도 바꿔서 실행해보자. 역시 게산된 값이 출력되는 것을 확인할 수 있다. 참고사항으로 print 문을 사용할 때 Hello Codeit! 같은 글자를 출력할 때는 따옴표로 문장을 감싸주었는데, 숫자 연산을 표현할 때는 따옴표로 감싸주지 않았다. 이 부분을 잘 기억하도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/16.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/16.png&quot; alt=&quot;숫자 연산 출력&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;등장한 콘솔은 필요가 없을 때 닫아놓을 수 있다. 콘솔영역의 오른쪽 상단에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 버튼을 클릭하여 닫을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/17.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/17.png&quot; alt=&quot;콘솔 닫기&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번에는 goodbye.py 파일을 더블클릭하여 연다. Goodbye world! 를 출력하는 코드를 작성하고 우측 상단의 실행 버튼을 클릭해보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/18.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/18.png&quot; alt=&quot;다른 파일 실행&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;콘솔에 Goodbye world! 대신 이전에 실행한 연산의 값인 7이 출력된 것을 확인할 수 있다. 왜 그럴까? 이전에 설명 했듯 실행 버튼은 가장 최근에 실행된 파일을 다시 실행하는 기능이다. 콘솔의 내용을 잘 보면 실행된 파일이 가장 최근에 실행했던 hello.py 파일인 것을 확인할 수 있다. goodbye.py 파일을 실행하기 위해서는 화면 좌측에 goodbye.py 파일을 우클릭 한 뒤 &lt;strong&gt;Run ‘goodbye’&lt;/strong&gt; 버튼을 클릭하면 된다. 콘솔에 정상적으로 Goodbye world! 가 출력되는것을 볼 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/19.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/19.png&quot; alt=&quot;다른 파일 실행2&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/20.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/20.png&quot; alt=&quot;run 버튼 클릭&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/21.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/21.png&quot; alt=&quot;정상 출력 확인&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;매번 실행 버튼을 누르는 것이 불편하다면 실행을 더 편하게 하는 방법이 있다. 키보드 단축키를 활용하는 방법인데, Mac 기준으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌃ + R&lt;/code&gt; 을 눌러 실행할 수 있다. PyCharm의 설정이나 Windows 와 Mac 운영체제의 차이에 따라서 단축키는 다를 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;print-사용해보기&quot;&gt;print 사용해보기&lt;/h3&gt;

&lt;p&gt;파이썬에서 print 를 사용하여 원하는 내용을 콘솔에 출력할 수 있다. 실습을 위해서 &lt;strong&gt;12&lt;/strong&gt; 라는 숫자를 출력하는 print 문을 여러가지 작성해보자. 아래 코드는 예시 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 print 문의 결과가 12로 출력되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Codeit/2020-11-22-1/22.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Codeit/2020-11-22-1/22.png&quot; alt=&quot;12 출력하기 예시&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;조금 변형해서 아래와 같은 코드를 작성하고 실행시켜 보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;print문 내부에 +, * 등의 연산자와 숫자 사이의 띄어쓰기를 모두 제거했음에도 불구하고 모두 동일하게 12를 출력하고 있는 것을 볼 수 있다. 연산을 할 때 숫자와 연산자 사이에 띄어쓰기를 하지 않아도 동작에는 문제가 없다. 하지만 파이썬에서는 코드를 적는 방법에 대한 스타일 가이드가 있다. 붙여서 작성해도 문법적으로 문제가 없지만 모두가 같은 방식으로 작성해야 다른 사람의 코드를 읽거나 수정하기에 수월하기 때문에 정해진 스타일 가이드를 따르는 것이 좋다. 여기서는 연산자와 숫자는 띄어쓰는 것이 가이드 내용이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;파이썬 개발자들은 &lt;strong&gt;PEP8&lt;/strong&gt; 이라는 규칙을 지키는 것을 권장한다. 다음의 링크에서 확인할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;</content><author><name>SANGHYUK LEE</name></author><category term="codeit" /><category term="Python" /><category term="codeit" /><category term="programming" /><summary type="html">파이썬 첫 걸음</summary></entry><entry><title type="html">Swift 개발자 면접 질문 List</title><link href="http://localhost:4000/interview/1/" rel="alternate" type="text/html" title="Swift 개발자 면접 질문 List" /><published>2020-11-12T00:00:00+09:00</published><updated>2020-11-12T00:00:00+09:00</updated><id>http://localhost:4000/interview/1</id><content type="html" xml:base="http://localhost:4000/interview/1/">&lt;h1 id=&quot;swift-개발자-면접-질문-list&quot;&gt;Swift 개발자 면접 질문 List&lt;/h1&gt;

&lt;p&gt;개발자를 채용하는 면접에는 기술 면접이 있다. 여러번 면접을 경험하다 보니 특정 질문들을 자주 받는 느낌이 들었다. 업무를 진행하는데 있어서 중요한 부분들을 주로 질문한다고 생각이 들었고, 그 말은 반대로 꼭 공부해야 알아야 할 부분이라는 생각이 들었다. 그래서 실제 면접을 통해서 받는 질문들을 정리하려고 한다.&lt;/p&gt;

&lt;p&gt;우선 나는 Swift 언어로 개발하는 iOS 개발자이므로 Swift 와 관련된 질문들이 주가 될 것이다. 기술적인 질문들과 개발자 한 사람 자체를 평가하기 위해 하는 질문들도 포함하여 정리해보겠다.&lt;/p&gt;

&lt;h2 id=&quot;기술-관련&quot;&gt;기술 관련&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Class 와 Struct 의 차이점&lt;/li&gt;
  &lt;li&gt;동기와 비동기의 차이점&lt;/li&gt;
  &lt;li&gt;Swift 의 접근제어자의 종류와 범위&lt;/li&gt;
  &lt;li&gt;Swift 에서으 소켓통신&lt;/li&gt;
  &lt;li&gt;프로세스와 스레드&lt;/li&gt;
  &lt;li&gt;프로세스와 스레드의 차이점&lt;/li&gt;
  &lt;li&gt;Serial Queue, Concurrent Queue 차이&lt;/li&gt;
  &lt;li&gt;깃 플로우&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;협업-관련&quot;&gt;협업 관련&lt;/h2&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Interview" /><category term="Interview" /></entry><entry><title type="html">CHAPTER02: Xcode - 5. Xcode의 구성 요소</title><link href="http://localhost:4000/swift-grammar/2-5/" rel="alternate" type="text/html" title="CHAPTER02: Xcode - 5. Xcode의 구성 요소" /><published>2020-11-05T00:00:00+09:00</published><updated>2020-11-05T00:00:00+09:00</updated><id>http://localhost:4000/swift-grammar/2-5</id><content type="html" xml:base="http://localhost:4000/swift-grammar/2-5/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/swift.png&quot; alt=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5-xcode의-구성-요소&quot;&gt;5. Xcode의 구성 요소&lt;/h1&gt;

&lt;p&gt;프로젝트를 생성하거나 생성된 프로젝트를 실행하면 Xcode는 여러 개의 작은 영역으로 분할된 커다란 윈도우 형태로 나타난다. ‘워크 스페이스(Work Space)’라고 불리는 이 윈도우는 개발에 관련된 모든 것을 처리하기 위해 만들어진 Xcode의 가장 기본적인 작업 공간이다. 워크스페이슨는 기능에 따라 여러 개의 작은 영역으로 다시 분할되는데, 각각의 영역은 저마다 고유한 기능을 갖추고 개발 과정에서 중요한 역할을 담당한다. 아래 그림은 Xcode를 구성하는 각 영역을 보여주고 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/1.png&quot; alt=&quot;Xcode 각 부분과 명칭&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이들 영역의 명칭은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;툴바 영역 (Toolbar Area)&lt;/li&gt;
  &lt;li&gt;내비게이터 영역 (Navigator Area)&lt;/li&gt;
  &lt;li&gt;에디터 영역 (Editor Area)&lt;/li&gt;
  &lt;li&gt;디버그 영역 (Debug Area)&lt;/li&gt;
  &lt;li&gt;인스펙터 영역 (Inspector Area)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각의 영역은 특성에 따라 더 작은 영역으로 나누어 지기도 한다. 차례대로 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;51-툴-바-영역&quot;&gt;5.1 툴 바 영역&lt;/h2&gt;

&lt;p&gt;툴바 영역은 워크스페이스의 가장 위쪽에 위치한 영역으로, 작업을 도와주는 도구가 모여 있는 곳이다. 앱의 빌드 및 실행이나 시뮬레이터의 설정이 여기에서 관리된다. 전체적인 프로젝트의 상태와 결과를 나타내기도 하며, 각종 보조적인 창을 여닫는 기능을 담당하기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/2.png&quot; alt=&quot;툴바 영역&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;툴바 영역은 처리하는 기능에 따라 다시 다섯 개의 작은 영역으로 나눌 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/3.png&quot; alt=&quot;앱 실행 및 중지 버튼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;툴바의 맨 앞에 놓인 두 개의 버튼은 앱의 실행과 중지를 담당하는 버튼이다. ► 버튼을 클릭하면 실행에 앞서 소스 코드가 컴파일되고, 이 과정에서 오류가 발생하지 않으면 이어서 앱이 실행된다. 개발용 맥에 실제 기기가 연결되어 있다면 연결된 기기에서 앱을 실행할 수도 있지만 그렇지 않으면 앱 시뮬레이터를 통해 앱이 실행된다. 이를 통해 앱을 테스트해서 정상적으로 기능이 동작하는지를 확인해 볼 수 있다. 앱의 실행을 중지하고 싶다면 오른쪽 ◼︎ 버튼을 클릭하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/4.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/4.png&quot; alt=&quot;스키마와 시뮬레이터 선택 옵션&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱의 실행 및 중지 버튼 옆에 있는 것은 시뮬레이터 선택 옵션이다. 어떤 기기에서 앱을 실행할지 선택할 수 있는 옵션이다. 이 옵션을 클릭하면 여러 가지 버전의 동작 가능한 시뮬레이터들이 그림과 같이 나열된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/5.png&quot; alt=&quot;앱 시뮬레이터 버전 선택&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;원하는 기기를 선택한 후 앞의 ► 버튼을 클릭하면 선택한 버전의 시뮬레이터가 기동되고, 제작 중인 앱이 시뮬레이터를 통해 실행된다. Xcode의 버전 업그레이드에 따라 앱 시뮬레이터가 지원하는 버전도 함께 확장되므로 최신 기능을 테스트하기 위해서는 항상 Xcode의 버전을 최신으로 유지해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/6.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/6.png&quot; alt=&quot;보조 에디터 모드&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;에디터 영역 상단의 오른쪽에 놓인 버튼은 어시스턴트 에디터, 즉 보조 에디터를 여닫을 수 있는 기능이다. 앱을 제작하다 보면 화면 UI와 소스 코드를 함께 작업해야 하는 일이 많이 생기는데, 이때 이 버튼을 이용해 보조 에디터를 열면 UI와 소스 코드를 나란히 놓고 작업할 수 있어 편리하다. 버튼을 눌러 어떤 보조 에디터를 열지 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/7.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/7.png&quot; alt=&quot;Xcode 레이아웃 편집 버튼&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xcode의 레이아웃을 조절할 수 있는 버튼들이다. 버튼에 표시된 영역들을 열고 닫을 수 있는 토글 버튼들이다. 왼쪽의 버튼은 내비게이션 영역을, 하단의 버튼은 디버그 영역을, 오른쪽 버튼은 인스펙터 영역을 열고 닫는데 사용된다. 실제로 작업을 하다 보면 화면이 좁아서 Xcode에 열려있는 창들이 무척 거추장스러울 때가 있는데, 이때 이 버튼들을 이용하여 필요 없는 창을 닫으면 훨씬 넓은 화면으로 작업할 수 있어 유용하다. 더 이상 설명이 필요 없을 만큼 직관적인 버튼들이므로 직접 눌러보면서 확인해 보도록 하자.&lt;/p&gt;

&lt;h2 id=&quot;52-내비게이터-영역&quot;&gt;5.2 내비게이터 영역&lt;/h2&gt;

&lt;p&gt;내비게이터 영역은 워크스페이스 왼쪽에 위피한 영역이다. 이 영역은 우리 말로 ‘탐색기 영역’ 정도로 해석할 수 있는데, 뭔가 탐색이 필요한 항목들을 쉽게 찾을 수 있도록 도와주는 역할을 담당한다. 내비게이터 영역은 효율적인 탐색을 위해, 탐색할 대상의 성격에 따른 아홉가지 세부 탐색기로 나누어진다. 차례대로 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/8.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/8.png&quot; alt=&quot;내비게이터 영역&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;521-프로젝트-내비게이터&quot;&gt;5.2.1 프로젝트 내비게이터&lt;/h3&gt;

&lt;p&gt;프로젝트 내비게이터는 프로젝트의 파일을 탐색할 때 사용하는 내비게이터이다. 내비게이터 영역 상단의 탭 중에서 첫 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 1&lt;/code&gt; 을 눌러서 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;앞에서 생성한 MyFirstApp 프로젝트에 과련된 파일을 펼쳐보면 아래 그림과 같다. 현재는 프로젝트에 포함된 소스 파일인 AppDelegate.swift와 ViewController.swift, 그리고 화면을 그리기 위한 Main.storyboard 파일 등 몇 개밖에 없지만, 프로젝트가 진행되면서 필요한 파일들이 점차 늘어날 것이다. 프로젝트 내비게이터는 이들 파일을 한눈에 살펴보고 관리할 수 있도록 트리 형식의 목록을 제공하여 프로젝트 내 파일에 대한 접근성을 높여준다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/9.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/9.png&quot; alt=&quot;프로젝트 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;522-소스-컨트롤-내비게이터&quot;&gt;5.2.2 소스 컨트롤 내비게이터&lt;/h3&gt;

&lt;p&gt;소스 컨트롤 내비게이터는 소스 파일의 버전 관리를 위해 제공되는 내비게이터로, Xcode 9부터 새롭게 추가되었다. 내비게이터 상단 영역의 두 번쨰 탭에서 찾을 수 있으며, 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 2&lt;/code&gt; 를 눌러도 된다. 깃허브 시스템과 연동하는 형태로 기능을 제공하는데, 이를 이용하면 자신이 만든 소스를 깃허브 사이트(Https://github.com)에 올릴 수 있을 뿐만 아니라 깃허브에서 내려받은 오픈소스가 최신 버전으로 갱신될 경우 자동으로 알림을 받고 이를 업데이트할 수도 있다. 현재는 깃허브 시스템과 연동되지 않아 아무것도 보이지 않을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/10.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/10.png&quot; alt=&quot;소스 컨트롤 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 영역은 ‘리파지토리(Repository)’라고 불리는 소스 관리 전용 공간을 생성했을 때에만 사용 할 수 있으므로, 이를 위해서는 신규 프로젝트 생성 시 옵션에서 [Create Git repository on my Mac]을 선택하거나 이미 생성된 상태라면 Xcode 메뉴에서 [Source Control] → [Create Git Repositories]를 차례로 선택해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/11.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/11.png&quot; alt=&quot;리파지토리를 설정하기 위한 프로젝트 생성 옵션&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;523-심벌-내비게이터&quot;&gt;5.2.3 심벌 내비게이터&lt;/h3&gt;

&lt;p&gt;심벌 내비게이터는 프로젝트에서 작성된 클래스나 구조체, 메소드 등의 심벌을 구조적으로 관리할 수 있는 내비게이터이다. 내비게이터 영역의 탭 중에서 세 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 3&lt;/code&gt; 을 눌러서 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/12.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/12.png&quot; alt=&quot;심벌 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MyFirstApp 프로젝트를 처음 생성하면 표준 템플릿에 의해 만들어진 파일과 클래스가 추가되어 있다. 위 그림에서 보는 것 처럼 심벌 내비게이터를 통해 각각의 클래스와 그 안에 정의된 메소드를 확인할 수 있다. 심벌 내비게이터의 항목 앞에 붙어있는 영문자 이미지는 심벌의 종류를 나타내는 것으로 클래스는 C, 구조체는 S, 메소드는 M으로 표시되며, 함수는 F로, 열거형은 E로 나타낸다. C부터 E까지 영문자를 부여받은 모든 대상을 심벌이라고 표현한다.&lt;/p&gt;

&lt;p&gt;심벌 내비게이터에 나열된 각각의 심벌을 클릭하면 소스 코드에 작성된 심벌의 상세 내용이 에디터 영역에 표시된다. 이를 통해 손쉽게 심벌의 코드 내용을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;524-검색-내비게이터&quot;&gt;5.2.4 검색 내비게이터&lt;/h3&gt;

&lt;p&gt;검색 내비게이터는 프로젝트 내부의 내용을 검색할 때 사용하는 기능으로, 빠른 검색과 깔끔한 정리를 자랑한다. 내비게이터 영역의 탭 아이콘 중에서 네 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 4&lt;/code&gt; 를 눌러서 선택할 수 있다. 아래 그림은 검색 내비게이터를 이용하여 ‘version’ 이라는 키워드를 검색할 결과를 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/13.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/13.png&quot; alt=&quot;검색 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;검색 내비게이터는 소스 파일뿐만 아니라 설정 파일, 프로젝트 마스터 파일에 기록된 검색 키워드까지 검색할 정도로 광범위한 검색을 처리하기 때문에 프로젝트 전체에서 해당하는 키워드를 찾을 때 매우 요긴하게 사용할 수 있다. 필자의 경우, 특정 값이나 변수명을 모조리 바꾸어야 할 경우에 검색 내비게이터를 이용하여 해당하는 모든 키워드를 찾곤 한다.&lt;/p&gt;

&lt;h3 id=&quot;525-이슈-내비게이터&quot;&gt;5.2.5 이슈 내비게이터&lt;/h3&gt;

&lt;p&gt;Xcode는 코딩 도중에 잘못된 문장을 입력하거나 틀린 문법을 사용하면 문제가 있음을 알려주는 경고나 오류 표시가 즉각적으로 나타난다. 이 표시를 클릭하여 활성화하면 표시된 내용에 대한 상세한 정보를 볼 수 있는데, 이슈 내비게이터는 이런 경고나 오류 등의 이슈만 정리해서 보여주는 내비게이터이다. 이슈 네비게이터를 사용하면 현재 코드의 어느 부분이 문제이고, 어느 부분을 고쳐야 하는지를 한눈에 파악할 수 있다. 내비게이터 영역의 탭 중에서 다섯 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 5&lt;/code&gt; 를 누르면 선택된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/14.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/14.png&quot; alt=&quot;이슈 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이슈 내비게이터에 표시되는 문구를 클릭하면 이슈가 발생한 소스 코드 위치로 즉시 이동하게 된다. 이를 통해 오류를 처리해야 할 지점을 손쉽게 찾아갈 수 있다. 이슈 내비게이터에 표시되는 내용은 항상 주의하여 문제점을 해결해주어야 하며, 그렇지 않을 경우 컴파일이 실패하거나 더 이상 진행되지 않는 등의 심각한 문제가 발생할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/15.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/15.png&quot; alt=&quot;이슈 내비게이터를 통해 오류 위치를 탐색한 모습&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;526-테스트-내비게이터&quot;&gt;5.2.6 테스트 내비게이터&lt;/h3&gt;

&lt;p&gt;테스트 내비게이터는 MyFirstApp 프로젝트를 생성할 때 자동으로 구성된 테스트용 파일인 MyFirstAppTests.swift의 내용을 보여주는 영역이다. 테스트를 위한 목적으로 만들어진 이 파일에서 테스트 항목은 일반적인 클래스의 메소드로 작성되어 있지만, 다른 클래스는 메소드와 구분되는 이 클래스의 특징이 있는데 바로 XCTestCase라는 클래스를 상속받았다는 점이다. 이 클래스는 테스트를 목적으로 하는 클래스다. 이 클래스를 상속받은 클래스의 테스트 항목이 표시되는 영역이 테스트 내비게이터이다. 테스트 내비게이터는 내비게이터 영역의 탭 아이콘 중 여섯 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 6&lt;/code&gt; 을 눌러서 선택할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/16.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/16.png&quot; alt=&quot;테스트 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;테스트 클래스는 프로젝트 생성 시 [Include Tests] 옵션에 체크 했을 때 생성된다. 이 기능을 사용하고자 하는 경우, 프로젝트 생성 설정에서 다음 그림과 같이 체크해 주도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/17.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/17.png&quot; alt=&quot;테스트 클래스 추가 옵션&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;527-디버그-내비게이터&quot;&gt;5.2.7 디버그 내비게이터&lt;/h3&gt;

&lt;p&gt;디버그 내비게이터 영역은 평소에는 아무것도 표시되지 않다가 시뮬레이터가 동작하면서 앱이 실행되면 디버그에 필요한 각종 정보를 보여주는 영역이다. 특히, 브레이크 포인트와 함께 사용할 경우 지정된 브레이크 포인트에서 실행을 일시적으로 멈추고 다음 명령을 기다리는 형태로 표시된다.&lt;/p&gt;

&lt;p&gt;디버그 내비게이터는 내비게이터 영역의 탭 아이콘 중 일곱 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 7&lt;/code&gt; 을 눌러서 선택할 수 있지만, 앱이 실행되는 동안에만 정보가 표시된다는 점을 꼭 기억하기 바란다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/18.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/18.png&quot; alt=&quot;디버그 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;디버그 내비게이터에 표시된 브레이크 포인트에서 실행이 멈춰 있을 때 다음 브레이크 포인트로 넘어가거나 실행을 재개하고 싶을 경우 디버그 영역의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt; 버튼을 클릭하거나 키보드에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌃ + ⌘ + Y&lt;/code&gt; 를 함께 누르면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/19.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/19.png&quot; alt=&quot;디버그 내비게이터와 continue 버튼&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;528-브레이크-포인트-내비게이터&quot;&gt;5.2.8 브레이크 포인트 내비게이터&lt;/h3&gt;

&lt;p&gt;소스 코드를 디버깅하기 위해서는 실행 중간에서 코드의 진행을 멈추고 메모리나 변수값 등의 내용물을 확인해야 할 경우거 있다. 이때 코드의 진행을 멈출 수 있는 특정한 표시를 코드 내 원하는 위치에 삽입할 수 있는데, 이를 &lt;strong&gt;브레이크 포인트(Breakpoints, 중단점)&lt;/strong&gt;이라고 한다. 브레이크 포인트를 설정한 상태에서 브레이크 포인트가 걸려있는 목록을 확인하고 다음 액션을 관리할 수 있는 영역이 바로 브레이크 포인트 내비게이터 영역이다. 내비게이터 영역의 탭 아이콘 중 여덟 번째 아이콘을 선택하거나 키보드 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 8&lt;/code&gt; 을 함께 누르면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/20.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/20.png&quot; alt=&quot;브레이크 포인트 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;529-리포트-내비게이터&quot;&gt;5.2.9 리포트 내비게이터&lt;/h3&gt;

&lt;p&gt;여덟 개의 내비게이터 탭 중 마지막 항목인 리포트 내비게이터는 빌드 결과나 실행 결과 등 작업의 결과를 확인할 수 있는 내비게이터이다. 앱에서 출력하는 로그나 오류 메시지와는 다르게, 작업이 처리된 내역을 확인하는 용도로 사용된다. 내비게이터 영역 하단의 필터 바와 함께 사용하면 원하는 내용만 필터링 할 수 있으므로 예전의 처리 결과와 비교할 때 편리하다. 실행 요령은 내비게이터 영역의 탭 아이콘 중 마지막 아이콘을 클릭하거나 단축키 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘ + 9&lt;/code&gt; 를 누르면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/21.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/21.png&quot; alt=&quot;리포트 내비게이터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;53-에디터-영역&quot;&gt;5.3 에디터 영역&lt;/h2&gt;

&lt;p&gt;에디터 영역은 코드 작성이나 화면 설계 등 앱을 만들 때 필요한 대부분의 핵심 작업이 이루어지는 영역으로서 워크스페이스 가운데에 위치하고 있으며, 대부분의 영역을 차지한다. 워크스페이스 왼쪽에 있는 내비게이터 영역에서 파일이나 심벌을 선택하면 선택된 소스 파일이 에디터 영역에서 열릴 뿐만 아니라, 만약 수정할 수 있는 파일이라면 이 영역에서 파일을 수정할 수도 있다. 단, 내비게이터 영역에서 파일을 클릭하면 해당 파일이 워크스페이스 내부에서 열리지만 더블클릭하면 별도의 편집 창을 통해 열리는 특성이 있으므로 주의해야 한다. 아래 그림은 내비게이션 영역과 함께 표시된 에디터 영역을 보여준다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/22.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/22.png&quot; alt=&quot;에디터 영역&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;에디터 영역에서 사용되는 에디터는 크게 두 종류이다. 소스 코드를 수정할 수 있는 텍스트 에디터와 스토리보드 파일의 UI를 수정할 수 있는 인터페이스 빌더가 그것이다. .xcodeproj 파일의 설정 내용을 수정할 수 있는 설정 창 에디터도 포함해야 겠다. 에디터 영역은 선택된 파일의 종류에 따라 자동으로 적잘한 에디터를 선택하여 실행해 준다.&lt;/p&gt;

&lt;p&gt;텍스트 에디터 왼쪽에는 줄 번호가 있는데, 여기를 마우스로 클릭하면 클릭한 라인에 브레이크 포인트가 설정된다. 앱을 실행했을 때 해당 위치에서 실행을 잠시 멈추게 하는 역할이다. 에디터 영역 위에는 현재의 워크스페이스 내에 있는 모든 레벨의 항목에 다양하게 접근할 수 있는 점프 바가 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/23.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/23.png&quot; alt=&quot;브레이크 포인트와 점프 바&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;점프 바에는 프로젝트 시작부터 현재 열린 파일까지의 디렉터리 단계가 표시되어 있다. 현재 열린 파일과 동일한 디렉터리에 있는 파일을 선택하고자 할 때는 가장 뒤쪽에 표시된 파일을 선택하면 된다. 만약 프로젝트 최상단부터 접근하여 파일에 접근하려면 점프 바의 가장 앞에 있는 프로젝트 아이콘을 선택하여 원하는 디렉터리나 파일에 차례대로 접근하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/24.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/24.png&quot; alt=&quot;점프 바에서 파일 접근&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;에디터 영역의 점프 바는 디렉터리 단계에 따라 순차적으로 접근하는 방식 외에도 점프 바 가장 왼쪽의 아이콘을 통하여 최근에 열었던 파일 목록을 제공하기도 한다. 이를 이용하면 최근에 작업했던 파일에 빠르게 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/25.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/25.png&quot; alt=&quot;점프 바에서 최근에 열었던 파일 열기&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;클래스 파일 등의 텍스트 기반 파일을 편집할 때와는 달리 스토리보드 파일이나 nib, xib 파일을 편집할 때에는 &lt;strong&gt;인터페이스 빌더&lt;/strong&gt;가 실행된다. 인터페이스 빌더는 화면 UI를 설계할 때 사용되는 에디터로, 그래픽 기반의 툴이다. 인터페이스 빌더를 사용하면 우리가 실제 앱을 보듯이 그대로 화면을 그려낼 수 있으므로 무척 편리하다. 이 툴 덕분에 우리는 화면 UI의 결과를 직접 보면서 편집할 수 있다.&lt;/p&gt;

&lt;p&gt;인터페이스 빌더는 UI 기반 파일을 클릭하면 자동으로 실행된다. 따라서 굳이 인터페이스 빌더를 열고자 애쓸 필요는 없다. 열려야 할 때가 되면 스스로 열린다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/26.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/26.png&quot; alt=&quot;인터페이스 빌더&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;인터페이스 빌더는 작업의 편의를 위하여 몇 가지 보조 도구를 제공하는데, 화면 UI와 관련된 소스 코드 작업을 쉽게 할 수 있도록 도와주는 &lt;strong&gt;보조 에디터(Assistant Editor)&lt;/strong&gt;와 스토리보드에 작성된 객체들의 계층 관계를 정리하여 보여주는 &lt;strong&gt;문서 개요창(Document Outline)&lt;/strong&gt;이 그것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/27.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/27.png&quot; alt=&quot;문서 개요창과 보조 에디터&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;보조 에디터는 오른쪽 상단의 아이콘을 통하여, 문서 개요창은 인터페이스 빌더 왼쪽 아래에 있는 아이콘을 통하여 여닫을 수 있다. 앞서 툴바 영역에 대해 학습할 때 보조 에디터를 여는 버튼에 대해 배웠던 것, 아직 기억하는가? 보조 에디터와 문서 개요창을 각각 여닫는 자세한 방법은 실습 과정에서 배워보기로 한다.&lt;/p&gt;

&lt;h2 id=&quot;54-디버그-영역&quot;&gt;5.4 디버그 영역&lt;/h2&gt;

&lt;p&gt;디버그 영역은 Xcode 워크스페이스 중앙 아래에 있는 영역이다. 평소에는 특별한 정보가 나타나지 않지만, 프로젝트를 실행하거나 브레이크 포인트를 이용하여 코드를 디버깅할 때 내용이 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/28.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/28.png&quot; alt=&quot;디버그 영역&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;디버그 영역은 좌우 양쪽으로 분할되어 있는데, 좌측은 변수 정보 영역이며 우측은 콘솔 영역이다. 변수 정보 영역은 해당 시점에서 사용된 모든 변수들이 갖는 메모리상의 값을 출력해주는 영역으로, 주로 브레이크 포인트와 함께 사용된다. 우측의 콘솔 영역은 소스 코드상에서 출력하는 모든 메시지가 나타나는 곳이다. 앱을 만드는 과정에서 우리는 print() 구문 또는 NSLog() 구문을 사용하여 여러가지 메시지를 출력해볼 텐데, 이 메시지들이 출력되는 영역이 바로 여기라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;디버그 영역은 필요에 따라 좌우측 창을 여닫을 수 있다. 디버그 영역 전체의 여닫음 여부는 디버그 영역 상단의 버튼으로 제어하고, 좌우측 각각의 창을 열고 닫을 때에는 디버그 영역 우측의 하단에 있는 열고 닫기 아이콘을 사용한다. 창 옆의 휴지통 아이콘은 출력된 로그를 지울 때 사용된다.&lt;/p&gt;

&lt;h2 id=&quot;55-인스펙터-영역&quot;&gt;5.5 인스펙터 영역&lt;/h2&gt;

&lt;p&gt;인스펙터 영역은 다양한 객체들에 대한 속성을 관리하는 영역으로, 속성의 타입에 따라 최대 6개 탭으로 나누어진다. 여기서 ‘최대’라고 표현한 것은 파일이나 인터페이스 빌더의 화면 객체 등 현재 선택된 대상에 따라 보여지는 탭의 개수가 서로 다르기 때문이다.&lt;/p&gt;

&lt;p&gt;탭의 내용 역시 현재 선택된 대상의 영향을 받는다. 내비게이터에서 파일을 클릭했을 때와 인터페이스 빌더에서 화면 요소를 클릭하여 선택했을 때, 각각의 인스펙터 영역에서 나타나는 속성 항목이 서로 다르다. 인터페이스 빌더에 포함된 화면 요소라 할지라도, 종류에 따라 보여지는 항목이 달라지기도 한다. 버튼을 선택했을 때와 텍스트 필드를 선택했을 때, 각각 서로 다른 항목을 보여준다는 뜻이다.&lt;/p&gt;

&lt;p&gt;파일이 선택되어 있을 때 인스펙터 영역에 나타나는 탭은 모두 두 개이다. 파일의 정보와 속성을 설정하는 &lt;strong&gt;파일 인스펙터(File Inspector) 탭&lt;/strong&gt;과, 관련 정보를 빠르게 요약해서 보여주는 &lt;strong&gt;빠른 도움말 인스펙터(Quick Help Inspector) 탭&lt;/strong&gt;이 전부다. 아래 그림과 같은 모습이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/29.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/29.png&quot; alt=&quot;인스펙터 영역(파일 선택 시)&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;파일 인스펙터 탭에서는 파일명, 파일 타입 등을 수정하거나 필요한 정보를 확인할 수 있고, 들여쓰기 및 코딩 편집 상태를 정렬할 수 있는 등의 설정도 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/30.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/30.png&quot; alt=&quot;인스펙터 영역(파일 선택 시)&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;빠른 도움말 인스펙터 탭에서는 소스 파일에 대한 간단한 정보가 레퍼런스를 참조할 수 있는 링크와 함께 제공된다.&lt;/p&gt;

&lt;p&gt;이와 달리 인터페이스 빌더에서 객체를 활성화하면 새로운 네 개의 탭이 더 나타난다. 도합 여섯 개의 탭이 된다. 각 탭은 쓰임새가 매우 다양하며 중요한 역할을 담당하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;551-파일-인스펙터-탭&quot;&gt;5.5.1 파일 인스펙터 탭&lt;/h3&gt;

&lt;p&gt;조금 전에 파일 인스펙터 탭에 대해 다루었는데 또 등장해서 의아했을 것이다. 하지만 이건 인터페이스 빌더와 연관된 파일 인스펙터 탭이다. 앞에서 살펴본 파일 인스펙터 탭과는 다른 요소가 많다.&lt;/p&gt;

&lt;p&gt;파일 인스펙터 탭은 선택된 스토리보드 파일에 대한 정보를 보여준다. 앱 개발 과정에서 국가별 언어 설정을 처리해야 할 때 이 탭에서 정보를 수정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/31.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/31.png&quot; alt=&quot;파일 인스펙터 탭&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;552-아이덴티티-인스펙터-탭&quot;&gt;5.5.2 아이덴티티 인스펙터 탭&lt;/h3&gt;

&lt;p&gt;아이덴티티 인스펙터 탭은 인터페이스 빌더에 추가된 객체와 이를 구현한 클래스 사이의 연결이나 객체의 ID 등, 각종 객체의 고유 정보를 관리하는 역할을 담당한다. 특히 스토리보드에 추가된 뷰 컨트롤러나 프로토타입 셀은 주로 소스 코드를 통해 상세 기능이 구현되는데, 이를 위해 클래스 파일을 작성한 후 이 탭의 속성을 이용하여 화면상의 객체와 연결할 수 있다. UI 객체를 소스 코드에서 참조하기 위한 식별값을 정의할 때에도 아이덴티티 인스펙터 탭을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/32.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/32.png&quot; alt=&quot;아이덴티티 인스펙터 탭&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;553-어트리뷰트-인스펙터-탭&quot;&gt;5.5.3 어트리뷰트 인스펙터 탭&lt;/h3&gt;

&lt;p&gt;어트리뷰트 인스펙터 탭은 현재 인터페이스 빌더에서 선택되어 있는 객체의 속성값을 관리한다. 어트리뷰트 인터페이스 탭에 표시되는 항목들은 어떤 객체가 선택되어 있느냐에 따라 차이가 굉장히 심한데, 이는 인터페이스 빌더 상의 객체들이 특성에 따라 서로 다른 속성을 가지기 때문이다. 아래 그림은 인터페이스 빌더에서 뷰 컨트롤러가 선택되어 있을 때의 어트리뷰트 인스펙터 탭의 모습이다. 뷰 컨트롤러의 크기, 방향, 상태 바 여부 등과 시작 화면 여부 설정, 화면 전환 방식 등에 대한 다양한 속성을 보여주고 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/33.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/33.png&quot; alt=&quot;어트리뷰트 인스펙터 탭(뷰 컨트롤러를 선택했을 때)&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;반면 아래 그림은 버튼이 선택되었을 때의 어트리뷰트 인스펙터 탭 모습이다. 탭의 내용은 모두 버튼의 속성에 관련된 항목들로 채워져 있어, 위의 뷰 컨트롤러 때와는 차이를 보인다. 버튼의 텍스트, 색상, 버튼의 모양과 이미지 및 배경 이미지 사용 여부, 그림자의 처리 방식 및 간격 등에 대한 속성이 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/34.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/34.png&quot; alt=&quot;어트리뷰트 인스펙터 탭(버튼을 선택했을 때)&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;뷰 컨트롤러나 버튼 이외의 객체들도 마찬가지이다. 항상 인터페이스 빌더에서 선택한 객체의 고유한 속성들이 어트리뷰트 인스펙터 탭에 나타나기 때문에, 원하는 객체의 속성을 설정하려면 그 전에 먼저 인터페이스 빌더에서 해당 객체를 클릭하여 선택해 주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;554-사이즈-인스펙터-탭&quot;&gt;5.5.4 사이즈 인스펙터 탭&lt;/h3&gt;

&lt;p&gt;앞에서 다룬 어트리뷰트 인스펙터 탭이 현재 선택된 객체 내부의 속성을 관리하는 탭이라면, 사이즈 인스펙터 탭은 선택된 객체의 외형에 대한 속성을 관리하는 탭이다. 주로 크기와 위치, 배치 방식 등을 관리한다. 사이즈 인스펙터 탭의 중간에 있는 ‘Autoresizing’ 항목은 화면의 크기 변경에 따라 객체가 어떻게 대응할지를 결정하는 기능으로, 좌우 여백 고정 여부와 가로, 세로 길이의 가변성 등을 설정하기 위한 매우 직관적인 인터페이스를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/35.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/35.png&quot; alt=&quot;사이즈 인스펙터 탭&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;555-커넥션-인스펙터-탭&quot;&gt;5.5.5 커넥션 인스펙터 탭&lt;/h3&gt;

&lt;p&gt;커넥션 인스펙터 탭은 인터페이스 빌더와 소스 코드 간의 연결 관계를 관리한다. 인터페이스 빌더를 통해 설계한 유저 인터페이스는 프로그래밍적으로 동작하기 위해 소스 코드와 연결되어야 하는데, 이 모든 연결 관계를 관리하는 것이 커넥션 인스펙터 탭이라고 할 수 있다. 커넥션 인스펙터 탭의 목록에서 좌측은 인터페이스 빌더상의 객체를, 우측은 코드상의 객체를 나타낸다. 좌우측이 서로 연결되어 있다면 인터페이스 빌더상의 객체와 소스 코드상의 객체들도 서로 연결되어 있다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/36.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-05-2-5/36.png&quot; alt=&quot;커넥션 인스펙터 탭&quot; class=&quot;align-center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 탭이 관리하는 대표적인 연결 정보는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;뷰 컨트롤러 사이의 화면 이동을 처리하는 세그웨이(Segueway)&lt;/li&gt;
  &lt;li&gt;스토리보드의 객체 속성을 소스 코드가 참조할 때 사용하는 @IBOutlet&lt;/li&gt;
  &lt;li&gt;버튼이나 테이블 셀, 제스처 뷰 등에서 발생한 이벤트를 특정 클래스의 이벤트 핸들러로 전달해주는 @IBAction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;56-라이브러리-영역&quot;&gt;5.6 라이브러리 영역&lt;/h2&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Swift-Grammar" /><category term="Swift" /><category term="Swift-Grammar" /><category term="꼼곰한 재은 씨의 스위프트:문법편" /><category term="이재은" /><category term="루비페이퍼" /><category term="ISBN:979-11-86710-23-4" /><summary type="html">스위프트 문법 스터디</summary></entry><entry><title type="html">CHAPTER02: Xcode - 4. Xcode 실행하기</title><link href="http://localhost:4000/swift-grammar/2-4/" rel="alternate" type="text/html" title="CHAPTER02: Xcode - 4. Xcode 실행하기" /><published>2020-11-01T00:00:00+09:00</published><updated>2020-11-01T00:00:00+09:00</updated><id>http://localhost:4000/swift-grammar/2-4</id><content type="html" xml:base="http://localhost:4000/swift-grammar/2-4/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/swift.png&quot; alt=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;4-xcode-실행하기&quot;&gt;4. Xcode 실행하기&lt;/h1&gt;

&lt;p&gt;설치가 끝난 Xcode를 실행해 보자. 실행하는 방법은 간단하다. 맥 하단의 독(Dock)에서 응용프로그램(Launchpad) 아이콘을 누르면 앱 목록이 나타나는데, 이 중에서 Xocde 아이콘을 찾아 클릭하면 된다. Xcode를 처음 실행했을 때는 아래 그림처럼 추가 컴포넌트 설치를 요구하는 창이 나타날 수 있는데, 이때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install&lt;/code&gt;을 클릭하여 새로 추가된 컴포넌트들을 설치한다. 만약 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quit&lt;/code&gt;을 클릭하면 Xcode가 그대로 종료되므로, Xcode를 싱행하기 위해서는 반드시 추가 컴포넌트를 설치해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/1.png&quot; alt=&quot;추가 컴포넌트 설치&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install&lt;/code&gt;을 클릭하고 잠시 기다리면 Xcode가 스스로 추가 컴포넌트를 내려받고 설치하는 과정을 진행한다. 설치가 완료되면 다시 Xcode가 실행되는데, 이때 가장 먼저 보이는 것이 다음 그림과 같은 시작 창이다. 앞으로 종종 자주 보게 될 창이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/2.png&quot; alt=&quot;Xcode 시작 창&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;시작 창 중앙에는 환영 문구와 함께 버전이 표시되고, 오른쪽에는 최근에 Xocde로 작업한 프로젝트 목록이 표시된다. 여러분의 Xcode가 처음 실행된 것이라면 필자와 다르게 빈 목록과 함께 ‘No Recent Project’라고 표시될 것이다.&lt;/p&gt;

&lt;p&gt;왼쪽의 환영문구 아래에는 세 가지 선택 항목이 있다. 크게 중요한 것은 아니지만, 모르면 헤맬 수 있으므로 확이하고 넘어가자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a new Xcode project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;새로운 프로젝트를 만들어 시작하고자 할 때 선택하는 항목이다. Xcode에서 프로젝트라 함은 iOS, macOS, watchOS 또는 tvOS 등에서 동작하는 애플리케이션이나 혹은 C/C++ 모듈을 말한다. 앞으로 우리가 스위프트로 실제 앱을 만들어볼 때 아주 여러 번 선택해볼 메뉴이니 잘 기억해 두자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone an existing project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;깃허브 저장소로부터 소스를 내려받아 작업을 진행하고자 할 때 선택하는 항목이다. 오픈소스 라이브러리를 사용할 때나 또는 비교적 큰 프로젝트를 진행할 때 사용하는 항목이지만, 당분간은 해당 사항이 없으므로 기억에서 지워버려도 된다.&lt;/p&gt;

&lt;p&gt;참고로, 위와 같은 시작 창을 거치지 않더라도 Xcode의 [File] 메뉴를 통해 플레이그라운드나 프로젝트를 생성할 수 있다. 처음부터 세 개의 항목 중 어느 하나를 정확히 선택해야 한다는 부담은 갖지 않아도 된다.&lt;/p&gt;

&lt;h2 id=&quot;41-xcode-프로젝트-생성하기&quot;&gt;4.1 Xcode 프로젝트 생성하기&lt;/h2&gt;

&lt;p&gt;스위프트 학습용으로 작성하는 코드나 간단한 프로토타이핑 등은 플레이그라운드 창에서도 얼마든지 가능하지만, 실제 앱을 만들 때에는 Xcode 프로젝트를 만들어 진행해야 한다. 앱은 하나의 파일로 이로어지는 것이 아니라, 여러 개의 파일이나 리소스를 모은 프로젝트를 바탕으로 개발되기 때문이다. 하나의 프로젝트가 대개 한의 앱을 의미한다고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;실제로 Xcode 프로젝트를 생성해보자. 생성 과정은 몇 단계로 이루어져 있지만 일단 익숙해 지고 나면 크게 복잡한 과정은 아니다. 프로젝트 생성은 다음 순서로 진행된다.&lt;/p&gt;

&lt;p&gt;템플릿 선택 → 프로젝트 정보 입력 → 저장 위치 선택 → 프로젝트 생성&lt;/p&gt;

&lt;p&gt;가장 먼저, Xcode를 실행하여 시작 창을 연다. Xcode가 이미 열려 있는 상태라서 시작 창이 나타나지 않으면 Xcode를 졸효했다가 다시 실행하자.&lt;/p&gt;

&lt;p&gt;시작 창이 나타나면 첫 번째 메뉴인 [Create a new Xcode project]를 선택한다. 새로운 프로젝트를 생성하는 메뉴이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/3.png&quot; alt=&quot;시작 창에서 Create a new Xcode project 선택&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 템플릿 선택 창이 나타나면 창의 상단 영역에서 [iOS]를 선택하고, [Application] 그룹에서 [App] 템플릿을 선택하자. 선택이 끝나면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt; 버튼을 클릭하여 다음 단계로 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/4.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/4.png&quot; alt=&quot;프로젝트 템플릿 선택 창&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이어서 프로젝트 정보를 입력하는 창이 나타난다. 프로젝트명(Product Name), 조직식별값(Organization Identifier)은 원하는 대로 넣을 수 있지만, 앞으로의 학습 과정에서 Language 항목만큼은 반드시 ‘Swift’를 선택해 주어야 한다. 그렇지 않으면 이 책의 실습 과정과 다른 결과를 볼 수도 있다. 이번에는 프로젝트 명을 ‘MyFirstApp’으로 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/5.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/5.png&quot; alt=&quot;프로젝트 정보 입력&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 정보를 입력했으면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt; 버튼을 누른다. 프로젝트 저장 위치를 저장하는 창이 나타날 것이다. 프로젝트 파일을 저장할 적당한 위치를 지정하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt; 버튼을 클릭하자. 여기까지 진행하면 프로젝트가 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/6.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/6.png&quot; alt=&quot;프로젝트 저장 위치 지정&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로젝트가 생성되고 나면 화면에는 프로젝트에 대한 각종 설정 항목들이 표시된다. 앱 아이디나 버전, 앱 이름 및 앱이 지원할 iOS 버전, 화면 회전 여부 등 다양한 정보를 수정하고 편집할 수 있다. 앞으로 자주 등장할 이 화면을 우리는 편의상 ‘프로젝트 정보창’이라고 부르자. 프로젝트 정보창에 표시된 항목 중에서 중요한 것들은 이후 본격적으로 앱을 만들기 시작할 때 상세히 언급될 예정이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/7.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/7.png&quot; alt=&quot;프로젝트 첫 화면&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로젝트가 생성되었다면 앱 아이콘이라든가 로딩 화면, 그리고 (비록 비어 있기는 하지만) 첫 화면 등 앱에 필요한 기초적인 것드은 이미 자동을호 구현된 상태라고 보면 된다. 따라서 우리는 바로 앱을 실행시켜볼 수 있다. (사실 개발 관점에서는 프로젝트 자체가 앱이라고 할 수 있다.) Xcode 상단 왼쪽 버튼들 중에서 ► 모양의 아이콘을 클릭해 보자. 잠깐 기다리면 뭔가 아이폰을 빼닮은 창 하나가 뜰 텐데, 이것은 Xcode가 제공하는 가상의 테스트 기기인 ‘시뮬레이터(Simulator)’이다. 이 녀석 덕분에 우리는 디바이스를 직접 연결하지 않고도 앱을 만들고 테스트해볼 수 있다.&lt;/p&gt;

&lt;p&gt;일단 시뮬레이터가 실행되면 프로젝트가 만들어 낸 앱이 자동으로 설치되고, 이어서 실행된다. 다만 아직 아무 것도 작업하지 않았으니 지금은 잠깐의 로딩 화면을 거친 다음, 빈 화면만 뜰 것이다. 이후 여러분의 작업에 따라 콘텐츠와 여러 기능이 채워지면서 이 앱 화면은 점점 멋있게 변해가겠지만, 일단 지금은 앱의 빈 껍데기가 만들어진 것이라고 이해하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/8.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/8.png&quot; alt=&quot;시뮬레이터&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번에는 Xcode 왼쪽에 나타난 프로젝트 파일 목록에서, 제일 위에 있는 프로젝트명을 마우스 오른쪽 버튼으로 클릭해 보자. 다음과 같은 메뉴가 나타나면 이 중에서 [Show in Finder]를 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/9.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/9.png&quot; alt=&quot;[Show in Finder] 선택&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 메뉴는 선택된 파일 또는 폴더를 맥의 파인더(Finder)에서 열어주는 역할을 한다. 파인더는 윈도우 탐색기와 같은 기능이라고 생각하면 된다. 열린 파인더에는 우리가 생성한 ‘MyFirstApp’이라는 이름으로 두 개의 아이콘이 만들어져 있는데, 하나는 프로젝트 관련 파일들이 저장된 폴더이고, 또 다른 하나는 .xcodeproj라는 파일이다. Xcode가 프로젝트를 관리하기 위해 사용하는 프로젝트 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/10.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-11-01-2-4/10.png&quot; alt=&quot;Xcode 프로젝트 관리 파일&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;xcodeproj 파일은 Xcode 프로젝트의 설정이 저장된 마스터 파일이므로, 만약 프로젝트를 작업하던 도중에 예기치 않게 Xcode가 꺼져버렸다거나 (실제로 이런 일 많이 일어난다. 누구나 한두 번쯤은 겪게 될 것이다) 혹은 예전에 진행하던 프로젝트를 다시 열어 진행하고 싶다면 .xcodeproj 파일을 더블클릭하면 된다. 해당 파일에 기록된 프로젝트 진행 정보를 Xcode가 읽고 다시 작업이 가능한 상태로 열어줄 것이다.&lt;/p&gt;

&lt;p&gt;여기까지가 기본적인 프로젝트를 생성하고, 앱을 실행해 보는 과정이다. 비록 우리가 아무것도 하지 않아 텅 빈 화면에 불과하지만 그래도 이 안에는 기본적으로 앱이 갖추어야 할 각종 요소들이 담겨 있다. 여러분들이 앞으로 할 일은 이 안에 우리가 필요로 하는 화면 요소들을 추가하고, 원하는 대로 동작할 수 있도록 기능을 부여하는 것이다. 이를 위해 여러분들은 스위프트 문법을 알아야 하고, 코코아 터치 프레임워크를 이해해야 하며 Xcode의 기능을 습득해야 한다.&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Swift-Grammar" /><category term="Swift" /><category term="Swift-Grammar" /><category term="꼼곰한 재은 씨의 스위프트:문법편" /><category term="이재은" /><category term="루비페이퍼" /><category term="ISBN:979-11-86710-23-4" /><summary type="html">스위프트 문법 스터디</summary></entry><entry><title type="html">CHAPTER02: Xcode - 3. Xcode 설치</title><link href="http://localhost:4000/swift-grammar/2-3/" rel="alternate" type="text/html" title="CHAPTER02: Xcode - 3. Xcode 설치" /><published>2020-10-26T00:00:00+09:00</published><updated>2020-10-26T00:00:00+09:00</updated><id>http://localhost:4000/swift-grammar/2-3</id><content type="html" xml:base="http://localhost:4000/swift-grammar/2-3/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/swift.png&quot; alt=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-xcode-설치&quot;&gt;3. Xcode 설치&lt;/h1&gt;

&lt;p&gt;Xcode는 애플 전용 데스크톱 운영체제인 macOS에서만 실행할 수 있다. 따라서 애플에서 출시한 맥북(MacBook), 맥북 프로(MacBook Pro), 맥북 에어(MacBook Air), 아이맥(iMac), 맥 미니(Mac Mini), 맥 프로(Mac Pro) 중 하나가 필요하다. 마이크로소프트사의 Windows 운영체제가 설치된 일반 PC에서는 Xcode를 설치할 수 없다.&lt;/p&gt;

&lt;p&gt;과거에는 Xcode를 내려받기 위해서 맥 OS 개발자 프로그램이나 iOS 개발자 프로그램에 가입해야 했다. 그렇지 않으면 별도 비용을 지불한 뒤에 내려받아야 했다. 물론 개발자 프로그램에 가입하는 것도 비용이 발생하므로 Xcode는 유료로 제공되는 툴이었다고 볼 수 있다. 하지만 스위프트의 발표와 함께 Xcode에 대한 라이선스를 무료 제공 방식으로 전환하면서 이제는 거의 제약 없이 무료로 내려받을 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Xcode의 정식 버전은 항상 앱스토어에서 받을 수 있지만, 베타 버전은 애플에서 제공하는 애플 개발자 사이트에서만 내려받을 수 있다. 베타 버전은 정식 버전보다 한발 앞서 최신 개선사항을 적용해 볼 수 있다는 장점이 있지만 아직 안정화되지 않은 버전이어서, 개발 도중 알 수 없는 오류로 인하여 Xcode가 다운되기도 한다. 호환성이 담보되지 않은 문법 및 구분 변경으로 인해 멀쩡하게 잘 돌아가던 스위프트 소스 코드들이 새 베타 버전의 Xcode에서 빨간 오류를 정신없이 뱉어낼 수도 있다. 이런 일들로 인한 스트레스를 덜 받고 안정적으로 사용하려면 가급적 앱스토어에서 제공하는 정식 버전을 이용하는 편이 좋다.&lt;/p&gt;

&lt;h2 id=&quot;31-정식-버전-설치--앱스토어&quot;&gt;3.1 정식 버전 설치 : 앱스토어&lt;/h2&gt;

&lt;p&gt;Xcode 정식 버전은 항상 앱 스토어를 통해 제공된다. 설치를 위해 맥 환경에서 앱스토어를 실행해 보자. 실행된 앱스토어 창의 왼쪽 위에 있는 검색 창에 Xcode를 입력하여 검색하면, 큼지막한 망치가 떡하니 자리 잡은 Xcode 앱 아이콘을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/1.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/1.png&quot; alt=&quot;앱스토어에서 Xcode 검색&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앱 아이콘을 클릭하여 상세페이지로 진입한 다음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;설치&amp;gt;&lt;/code&gt; 버튼을 클릭하면 로그인 과정을 거쳐 자동으로 Xcode 설치가 시작된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/2.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/2.png&quot; alt=&quot;앱스토어를 통한 Xcode 정식 버전 설치&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치 과정에서 등장하는 로그인 창에서는 애플에 등록된 계정을 입력하면 된다. 앱스토어에서 다른 앱을 내려받을 때 사용하던 일반 계정으로도 Xcode를 내려받고 설치하는 데에 아무 문제 없으므로 그냥 사용하면 된다. 이와 달리 베타 버전을 내려받을 경우에는 애플에 등록된 개발자 계정이 있어야 하니, 이를 구분해서 알아두면 될 것 같다. 물론 개발자 계정 등록은 무료이다.&lt;/p&gt;

&lt;p&gt;설치는 비교적 간단하다. 정식 버전으로 출시된 Xcode는 단순히 앱스토어를 거쳐 설치하기만 하면 끝이므로 크게 신경 써야 할 부분은 없다. 설치가 완료되면 위 앱스토어에 표시된 Xcode 아이콘이 맥의 응용프로그램에도 자동으로 추가되므로, 이를 통해 Xcode가 정상으로 설치되었음을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;32-베타-버전-설치--애플-개발자-사이트&quot;&gt;3.2 베타 버전 설치 : 애플 개발자 사이트&lt;/h2&gt;

&lt;p&gt;만약 여러분이 최신 문법과 곧이어 발표될 새 iOS 버전에 한발 앞서 대응하고 싶다면, 앱 스토어를 통해 Xcode 정식 버전을 사용할 것이 아니라, 애플 개발자, 사이트에서, 베타 버전의 Xcode를 내려받아 사용해야 한다. 다음은 베타 버전을 받을 수 있는 URL이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플 개발자 사이트 : https://developer.apple.com/download/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/3.png&quot;&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/2020-10-26-2-3/3.png&quot; alt=&quot;애플 개발자 사이트(https://developer.apple.com/download/)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;개발자 사이트를 통해 내려받은 파일은 xip 확장자 형식으로, ‘Extract in Place’ 또는 ‘Execute in Place’의 약자이다. ZIP 형식의 압축 파일과 비슷하지만, 파일의 압축을 해제하기 전에 먼저 파일의 변경이 없었는지 여부를 애플로부터 인증을 받는 압축 형식으로, Xcode 8 버전의 다운로드부터 적용되었다. macOS는 유닉스 시스템을 기반으로 하고 있기 때문에, 다운로드된 xip 파일은 압축을 해제한 결과물을 응용프로그램 폴더에 복사하는 형태로 프로그램이 설치된다. 설치된 프로그램을 제거할 때는 프로그램이 설치된 디렉터리를 응용프로그램 폴더로부터 삭제하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;내려받은 xip 파일을 더블클릭하면 압축된 파일이 해제되면서 자동으로 설치되는데, 만약 옵션을 선택하는 과정이 나온다면 모두 기본값으로 선택하여 진행하면 된다. 설치 도중에 다음과 같은 창이 표시되면 왼쪽의 Xcode 아이콘을 오른쪽의 Application 폴더 쪽으로 드래그한다. 이는 압축이 해제된 Xcode 파일을 응용 프로그램 폴더로 복사한다는 뜻이다. 복사가 끝나면 별도의 설치 완료 메시지가 없더라도 설치가 완료된 것으로 볼 수 있다.&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Swift-Grammar" /><category term="Swift" /><category term="Swift-Grammar" /><category term="꼼곰한 재은 씨의 스위프트:문법편" /><category term="이재은" /><category term="루비페이퍼" /><category term="ISBN:979-11-86710-23-4" /><summary type="html">스위프트 문법 스터디</summary></entry><entry><title type="html">CHAPTER02: Xcode - 2. Xcode란?</title><link href="http://localhost:4000/swift-grammar/2-2/" rel="alternate" type="text/html" title="CHAPTER02: Xcode - 2. Xcode란?" /><published>2020-10-19T00:00:00+09:00</published><updated>2020-10-19T00:00:00+09:00</updated><id>http://localhost:4000/swift-grammar/2-2</id><content type="html" xml:base="http://localhost:4000/swift-grammar/2-2/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/Swift-Grammar/swift.png&quot; alt=&quot;Swift&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-xcode란&quot;&gt;2. Xcode란?&lt;/h1&gt;

&lt;p&gt;Xcode는 앞으로 우리가 인터넷 브라우저만큼이나 자유자재로 다루어야 할 툴로서, iOS와 macOS용 앱을 개발할 수 있도록 애플에서 제공하는 IDE이다. ‘엑스코드’라고 읽으며, 맥북 등 애플 컴퓨터의 운영체제인 맥 OS에서만 실행되는 애플리케이션이다. 우리는 이 Xcode를 이용하여 오브젝티브-C나 스위프트를 작성하고, 애플리케이션을 개발한다.&lt;/p&gt;

&lt;p&gt;일반적으로 C 기반의 코드를 컴파일할 때 많이 사용되는 GCC라는 컴파일러가 있는데, Xcode는 GCC의 성능을 더욱 개선한 LLVM을 메인 컴파일러로 사용한다. 오브젝티브-C나 스위프트 코드 모두 실행 파일로 만들어질 때에는 LLVM 컴파일러에 의해 컴파일된다. Xcode가 공식적으로 지원하는 언어에는 C, C++, 오브젝티브-C, 스위프트, 자바, 파이썬, 루비 등이 있으며, 플러그인을 사용하면 파스칼, C#, 펄 등의 언어도 지원 가능하다.&lt;/p&gt;

&lt;p&gt;Xcode는 무척 방대한 역사를 자랑하는 애플리케이션이다. Xcode의 시작은 맥 OS의 시작과 거의 일치하는데, 맥 OS가 시작된 해가 2003년도이므로, Xcode는 11년 정도의 역사를 가지고 있다. 이것만으로도 충분히 오래되었다고 할 수 있지만, 따지고 보면 맥 OS의 전신이라고 할 수 있는 NeXTSTEP 운영체제 시절부터 Xcode는 이미 프로젝트 빌더(Project Builder)라는 이름으로 제공되고 있었기 때문에 이를 감안한다면 Xcode는 1988년에 출시된, 무료 26년의 유구한 역사를 가지는 IDE가 되는 셈이다.&lt;/p&gt;

&lt;p&gt;프로젝트 빌더가 Xcode로 이름이 바뀌고 제로링크, 분산 빌드 옵션, 코드 센스 인덱싱 등을 지원하기 시작하면서, Xcode는 명실상부하게 맥 OS의 공식 개발환경이 되었다. 이 과정에서 과거 카본 기반으로 작성되었던 SDK의 API들이 모두 오브젝티브-C 언어와 코코아 프레임워크(Cocoa Framework)로 재작성되기도 했다. 그 이후로 시간이 흐르면서 카본 프레임워크의 위치를 코코아 프레임워크가 잠식해 나갔다(현재는 코코아 프레임워크와, 아룰 가번욿 iOS나 watchOSㄹㄹ 지원하는 코코아 터치 프레임워크를 스위프트 언어로 재작성하는 작업이 다시 이루어졌다).&lt;/p&gt;

&lt;p&gt;Xcode에서 아이폰용 앱을 만들 수 있게 된 것은 Xcode 3 버전부터이다. 예전부터 맥 OS를 써왔던 사람이라면 경험해보았을 OS X Leopard의 출시와 함께 공개되었다(맥북이나 아이맥 등 데스크톱용 애플 기기의 운영체제에는 버전에 따른 별칭이 있는데, Leopard는 10.5버전에 붙은 이름이다). 이때 애플의 메인 컴파일러인 LLVM도 함께 덧붙여졌다.&lt;/p&gt;

&lt;p&gt;Xcode 4는 기존 버전에 비해 굉장히 많은 면에서 변신이 일어났다. 현재의 Xcode 외형과 비슷한 모습을 가지게 된 것도 Xcode 4부터이며, 기존에는 별도의 독립 애플리케이션 형태였던 인터페이스 빌더가 이 버전부터 Xcode 내부에 모듈 형태로 탑재됨에 따라 Xcode 하나만으로 앱을 개발할 수 있게 되었다. 동시에, 객체의 참조 카운팅을 컴파일러에서 스스로 처리하는 ARC 기능이 추가되기도 하였다.&lt;/p&gt;

&lt;p&gt;Xcode 4.2버전에서 Xcode는 완벽하게 단일 애플리케이션으로 통합되었다. 이전에는 앱스토어에서 Xcode를 직접 내려받는 것이 아니라 Xcode 설치 프로그램을 내려받은 후 이를 실행하면 Xcode를 내려받는 방식이었지만, 이 버전부터 Xcode를 직접 내려받게 되었다. 사용자는 애플리케이션을 내려받은 후 실행하면 끝이다. 설치에 있어서도 조금 더 간편해진 셈이다. 이를 통해 비로소 Xcode는 하나의 완전한 앱 개발 환경을 구성할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;iOS 7의 발표와 함께 공대된 Xcode 5는 iOS 7의 달라진 UI를 지원하기 위해 기존 버전의 UI를 호환성 있게 가져가는 데에 주력했다. 내장된 인터페이스 빌더에 많은 변화가 있었는데, 개발 UI 화면 단위로 하나씩만을 다루던 nib 파일 기반의 인터페이스 빌더가 스토리보드(storyboard) 파일 형식의 통합 인터페이스 빌더 위주로 대체된 것이 가장 큰 이슈라고 할 수 있다. 스토리보드 형식은 화면 인터페이스를 설계할 때 &lt;strong&gt;여러 개의 화면을 하나의 스토리보드 파일에 모아 다룸으로써 화면 간의 연결 관계나 흐름을 쉽게 파악할 수 있도록 지원하는 형식&lt;/strong&gt;으로, Xcode 4 버전부터 공개되었지만 본격적으로 사용하게 된 것은 Xcode 5 버전부터이다.&lt;/p&gt;

&lt;p&gt;이후 스위프트와 함께 공개된 Xcode 6은 외견상 큰 변화는 없었다. 하지만 Xcode가 스위프트를 지원하기 시작하면서 실시간으로 스위프트 코드를 작성하고 결과를 확인할 수 있도록 해주는 플레이그라운드가 추가된 점은 특기할 만한 사항이다.&lt;/p&gt;

&lt;p&gt;다음 해인 2015년에 발표된 Xcode 7은 스위프트 2를 지원할 뿐만 아니라, 맥 OS X, iOS, watchOS용 앱을 모두 만들 수 있는 더욱 확장된 개발 환경을 제공했다. 전체적인 외관이 조금 더 다듬어졌고, 세련된 UI를 가지게 된 것은 말할 필요도 없다.&lt;/p&gt;

&lt;p&gt;2016년에 발표된 Xcode 8에서 외관상 뚜렷한 변화는 없었다. 하지만 Xcode 7에서 스토리보드의 확대 축소가 제한적이었던 것과 달리 Xocde 8에서는 여러 단계로 스토리보드를 축소 또는 확대해서 작업할 수 있게 되었다. 또한 스토리보드 축소 시 화면 UI에 대한 편집 작업이 허용되지 않았던 과거 버전에서 발전하여 화면이 축소된 상태에서도 필요한 UI 편집 작업을 얼마든지 수행할 수 있게 됨으로써 화면 설계 작업이 훨씬 편리해졌다. 개인적으로 이같은 스토리보드와 기능 변화가 제일 달콤하게 느껴지는 부분이다.&lt;/p&gt;

&lt;p&gt;2017년에는 Swift 4, iOS 11의 발표에 맞추어 Xocde 9이 공개되었다. 이 버전 역시 Xcode의 외관상 변화는 크지 않지만, 대신 함께 제공되는 iOS 시뮬레이터가 드라마틱하게 변신했다는 점을 주목할 만하다. 이전 버전까지의 시뮬레이터는 단순히 화면과 기능만 테스트할 수 있는 밋밋한 일반 창 형태에 불과했던 것이, Xcode 9에서는 아이폰 형태를 그대로 본딴 모습으로 재탄생했을 뿐만 아니라 이전 버전에서는 단축키로 해결해야만 했던 홈버튼도 부활했다. 게다가 이제는 임의대로 시뮬레이터 크기를 늘리고 줄일 수도 있게 되었다. 뿐만 아니라, iPhone 외에 watchOS, tvOS용 시뮬레이터도 동시에 실행하여 결과를 확인할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;이외에도 Xcode 9에서 생긴 몇 가지 변화를 꼽아본다면 깃허브 연동을 위한 소스 컨트롤 기능이 내비게이터 패널에 추가되었다는 점, 오토 레이아웃 설정 시 화면상의 변화를 바로바로 확인 할 수 있게 되었다는 점, 오토 레이아웃 설정 시 화면상의 변화를 바로바로 확인 할 수 있게 되었다는 점, Swift 3 코드의 호환성 유지를 위한 컴파일러 버전 설정이 추가되었다는 점 등을 들 수 있을 것 같다. 전체적으로 Xcode 9은 Swift 3와 Swift 4 버전간의 호환성을 유지하는 데에 주력한 면이 크다.&lt;/p&gt;

&lt;p&gt;이처럼 해마다 버전이 업그레이드되면서 Xcode는 그 형태를 다양하게 바꾸어나가고 있다. 주의할 것은, 최신 iOS 버전을 기준으로 개발 작업을 진행하기 위해서는 항상 최신 벚번의 Xcode를 사용해야 한다는 점이다. 일부 IDE의 경우 최신 버전의 언어 문법을 사용하기 위해서는 플러그인 정도만 추가해주기도 하지만, Xcode는 새 버저의 전체 업데이트를 통해서만 최신 iOS를 지원하는 앱을 제작할 수 있다. 따라서 앱을 개발할 때에는 Xcode의 버전 업데이트 여부를 항상 신경 써야 한다(사실 방법이 있지만 나중에 소개하도록 한다).&lt;/p&gt;

&lt;p&gt;스위프트 언어를 지원하기 시작하는 Xcode 버전은 6부터지만 여기서 다루는 스위프트 4 문법은 Xcode 9 버전부터 지원한다. 앱스토어를 통해 Xcode 정식 버전을 설치하는 방법과 개발자 사이트를 통해 베타 버전을 설치하는 방법 모두를 알아보자.&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Swift-Grammar" /><category term="Swift" /><category term="Swift-Grammar" /><category term="꼼곰한 재은 씨의 스위프트:문법편" /><category term="이재은" /><category term="루비페이퍼" /><category term="ISBN:979-11-86710-23-4" /><summary type="html">스위프트 문법 스터디</summary></entry></feed>