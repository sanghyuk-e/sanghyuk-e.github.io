<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-12T18:40:22+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Sanghyuk’s Blog</title><subtitle>An amazing website.</subtitle><author><name>SANGHYUK LEE</name></author><entry><title type="html">[git] 버전 관리 무시 목록(.gitignore) 설정</title><link href="http://localhost:4000/git/1/" rel="alternate" type="text/html" title="[git] 버전 관리 무시 목록(.gitignore) 설정" /><published>2020-08-12T00:00:00+09:00</published><updated>2020-08-12T00:00:00+09:00</updated><id>http://localhost:4000/git/1</id><content type="html" xml:base="http://localhost:4000/git/1/">&lt;h1 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h1&gt;

&lt;h2 id=&quot;1-위험성&quot;&gt;1. 위험성&lt;/h2&gt;
&lt;p&gt;특정 파일은 git에서 버전 관리 대상에서 제외해야 합니다.&lt;/p&gt;

&lt;p&gt;프로젝트를 업로드할 때 개인키가 프로젝트 폴더내에 있을 수 있고, 이런 중요한 설정 정보는 git 저장소에 추가하지 말아야 합니다.&lt;/p&gt;

&lt;p&gt;이로인해서 해킹에 대상이 될 수 있고, 심각한 피해를 입을 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-해결방안&quot;&gt;2. 해결방안&lt;/h2&gt;
&lt;p&gt;git 에는 이러한 문제를 방지하기 위한 무시 목록을 작성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;.gitignore 에 작성된 파일은 git add 명령시 제외됩니다.&lt;/p&gt;

&lt;h2 id=&quot;3-작성법&quot;&gt;3. 작성법&lt;/h2&gt;
&lt;p&gt;.gitignore 의 각 라인에 무시할 파일 또는 디렉토리의 패턴을 적습니다.&lt;/p&gt;

&lt;p&gt;여러 파일을 한번에 지정할 경우 * 을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdbc.properties
*.class
*.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성하면 git add 명령어를 실행했을 때 jdbc.properties 파일을 제외하며, .class와 .jar 확장자를 가진 파일을 모두 무시합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이미 추가되어 버전 관리중인 파일에는 영향을 미치지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-응용&quot;&gt;4. 응용&lt;/h2&gt;
&lt;p&gt;만약 .gitignore 목록에 있는 파일을 추가해야 할 경우 -f 옵션을 이용해 추가할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add -f jdbc.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.gitignore 에 설정한 내용은 하위 디렉토리에도 동일하게 적용됩니다.&lt;/p&gt;

&lt;p&gt;만약 특정 하위 디렉토리가 다른 ignore 를 적용해야 할 경우 해당 디렉토리에 .gitignore 을 새로 만들어줍니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*
!jdbc.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 .gitignore 을 새로 만들어 config 폴더에 넣을 경우, 기본적으로 config 의 모든 파일을 무시하면서 jdbc.properties 라는 파일은 버전을 관리합니다. !는 이전의 ignore 패턴을 무효화 하는 문자열입니다.&lt;/p&gt;

&lt;p&gt;만약 파일명에 ! 가 들어갈 경우 escape 문자인 \ 를 ! 앞에 붙여줍니다.&lt;/p&gt;

&lt;h2 id=&quot;5-gitignoreio&quot;&gt;5. gitignore.io&lt;/h2&gt;
&lt;p&gt;사용하는 운영체제, IDE, 언어마다 추가하는 패턴들이 있으며 이를 매번 기억하여 입력하는 것은 매우 귀찮습니다.&lt;/p&gt;

&lt;p&gt;이런 귀찮은 일을 대신 처리해주는 &lt;a href=&quot;https://www.toptal.com/developers/gitignore&quot;&gt;gitignore.io&lt;/a&gt; 라는 서비스가 있습니다.&lt;/p&gt;

&lt;p&gt;일반적으로 사용되는 무시 패턴을 해당 서비스를 통해 작성하고, 추가적으로 필요한 부분만 무시 목록을 작성하면 편리하게 사용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;6-참고&quot;&gt;6. 참고&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;https://git-scm.com/docs/gitignore&lt;/a&gt;&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="git" /><category term="git" /><summary type="html">git의 버전 관리 무시 목록에 대해 다룹니다.</summary></entry><entry><title type="html">두번째 글</title><link href="http://localhost:4000/blog/2/" rel="alternate" type="text/html" title="두번째 글" /><published>2020-08-07T00:00:00+09:00</published><updated>2020-08-07T00:00:00+09:00</updated><id>http://localhost:4000/blog/2</id><content type="html" xml:base="http://localhost:4000/blog/2/">&lt;h1 id=&quot;두번째-글-입니다&quot;&gt;두번째 글 입니다.&lt;/h1&gt;

&lt;p&gt;안녕하세요&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Blog" /><category term="Blog" /><summary type="html">테스트 두번째 글</summary></entry><entry><title type="html">test title</title><link href="http://localhost:4000/blog/1/" rel="alternate" type="text/html" title="test title" /><published>2020-08-03T00:00:00+09:00</published><updated>2020-08-03T00:00:00+09:00</updated><id>http://localhost:4000/blog/1</id><content type="html" xml:base="http://localhost:4000/blog/1/">&lt;p&gt;깃헙 첫 글이다.&lt;/p&gt;

&lt;p&gt;일단 커밋을 채워보자&lt;/p&gt;

&lt;p&gt;커밋 수정하는 법을 알아본다&lt;/p&gt;</content><author><name>SANGHYUK LEE</name></author><category term="Blog" /><category term="Blog" /><summary type="html">test이다</summary></entry></feed>